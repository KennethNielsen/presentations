Outline:

Re-hash from last time (+1 question)
Main gitlab exercise
Skipped from main:
 Set up ssh access
 How to make a new feature branch after some time
 How to resolve conflicts
Extra subjects
 Special log views
 add -p
 Rewrite history (interactive rebase)
 git bisect
 git cherry pick
 Make MR and then continue developing in continuation
 FETCH_HEAD in manual merge recipy


NEWPAGE

Main exercise
=============

 * Aliasses

 * Find main group: KennethNielsenTeaching
 * Fork it to your own profile (notice it says where it was forked from)
 * Clone this repository to your computer (use the link on the GitLab page)
 * Look around (status, log)
 * Look at remote and add upstream
 * Look at branches (also -a)
 * Create new branch: git branch   or   git checkout -b
 * Create commits (add and commit, status and diff along the way)
 * Push with arguments
 * Look around on GitLab (commits, branches)
 * Make merge request
 * Look at merge request (Discussion, commits, changes)
 ### COFFEE BREAK ###
 * Make comments
 * Make revisions from review and push
 * See that previous inline comments are marked as from an outdated diff
 * More comments (user and reviewer)
 * KILLER FEATURE OF GITLAB AND GITHUB
 * Merge
 * Celebrate


NEWPAGE

Skipped from main
=================

Setting up passwordless ssh access
----------------------------------
Click the link on GitLab:
Generate key:
 * ssh-keygen -t rsa -C "k.nielsen81@gmail.com"
 * /home/kenni/.ssh/id_rsa_gitlab 
 * cat /home/kenni/.ssh/id_rsa_gitlab 
 * Paste on GitLab page
 * Create a branch and push (without password)

Make feature branch (really)
----------------------------
 * Talk from slides
 * Try ASE workflow

Resolve merge conflicts
-----------------------
Clone https://gitlab.com/KennethNielsenTeaching/conflict.git
Try merging fix
Try rebase fix
 Install kdiff3
git config --global mergetool.keepBackup false


NEWPAGE

Smaller topics and questions:
=============================

git help
--------
git help
git help command

Tracking branch
---------------
Try push with no arguments, set to simple
Set upstream, now push with no arguments work
Checkout branch -vv
QUESTION: git status shows behind or ahead???

Adding in patch mode
--------------------
add -p
Make several changes to a file and add and commit them one at a time

log and log subsets
-------------------
Adding more branches to the log
Do log subsets, in/not in syntax ^
--grep something_something

git diff
--------
branches, commits by hash, HEAD~1  (minus 1)

Accidentally committed work on master:
--------------------------------------
stash
cherry-pick

Continued work on feature branch
--------------------------------
Try in terminal
Remember to make commit to master, to make first merge a real merge

Interactive rebase
------------------
Make example with two files, each with a fix

Undo a commit from long ago
---------------------------
A: If it has been seen by others, you cannot undo the commit at that point in the history. Git is immutable
To undo it at the current point the in history use: git revert <commit>


Tools
=====

Bash prompt for git users
-------------------------

Shows information about the state of the current git archive
 * Git prompt with lots of information
  * https://github.com/magicmonty/bash-git-prompt
 * Simpler git prompt
  * https://github.com/jimeh/git-aware-prompt


Editor/IDE plugins
------------------

Emacs comes with VersionControl:
C-x v d   (directory status)
C-x v i   (register file i.e. add)
C-x v v   (check in i.e. add and commit) C-c C-c commits

Eclipse

Graphical tools
---------------

gitk (commit and repo viewer)
git-gui (create commits and use blame)
 git gui blame soco/core.py
 git gui browser master
 git gui citool   or   git citool
git-cola
gitkraken
